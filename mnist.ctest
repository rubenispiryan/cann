#include <SDL3/SDL.h>
#include <stdbool.h>
#include <string.h>

#define GRID_SIZE 28
#define PIXEL_SIZE 20
#define WINDOW_SIZE (GRID_SIZE * PIXEL_SIZE)

static float grid[GRID_SIZE][GRID_SIZE] = {0};

static void draw_grid(SDL_Renderer *renderer) {
    for (int y = 0; y < GRID_SIZE; ++y) {
        for (int x = 0; x < GRID_SIZE; ++x) {
            float v = grid[y][x];
            int brightness = (int)(v * 255);
            SDL_SetRenderDrawColor(renderer, brightness, brightness, brightness, 255);
            SDL_FRect rect = {
                x * PIXEL_SIZE, y * PIXEL_SIZE,
                PIXEL_SIZE, PIXEL_SIZE
            };
            SDL_RenderFillRect(renderer, &rect);
        }
    }

    SDL_SetRenderDrawColor(renderer, 50, 50, 50, 255);
    for (int i = 0; i <= GRID_SIZE; ++i) {
        SDL_RenderLine(renderer, i * PIXEL_SIZE, 0, i * PIXEL_SIZE, WINDOW_SIZE);
        SDL_RenderLine(renderer, 0, i * PIXEL_SIZE, WINDOW_SIZE, i * PIXEL_SIZE);
    }
}

static void set_grid_pixel(int x, int y) {
    int gx = x / PIXEL_SIZE;
    int gy = y / PIXEL_SIZE;
    if (gx >= 0 && gx < GRID_SIZE && gy >= 0 && gy < GRID_SIZE) {
        grid[gy][gx] = 1.0f;
    }
}

static void clear_grid() {
    memset(grid, 0, sizeof(grid));
}

static void get_grid_data(float dest[28][28]) {
    memcpy(dest, grid, sizeof(grid));
}

int mnist_start(void) {
    if (!SDL_Init(SDL_INIT_VIDEO)) {
        SDL_Log("SDL_Init Error: %s\n", SDL_GetError());
        return 1;
    }

    SDL_Window *window = SDL_CreateWindow("MNIST Grid Drawer", 640, 480, 0);
    if (window == NULL) {
        SDL_Log("SDL_CreateWindow Error");
        return 1;
    }
    SDL_Renderer *renderer = SDL_CreateRenderer(window, NULL);
    if (renderer == NULL) {
        SDL_Log("SDL_CreateRenderer Error");
        return 1;
    }

    bool running = true;
    bool drawing = false;

    while (running) {
        SDL_Event e;
        while (SDL_PollEvent(&e)) {
            switch (e.type) {
                case SDL_EVENT_QUIT:
                    running = false;
                    break;
                case SDL_EVENT_MOUSE_BUTTON_DOWN:
                    if (e.button.button == SDL_BUTTON_LEFT) {
                        drawing = true;
                        set_grid_pixel(e.button.x, e.button.y);
                    }
                    break;
                case SDL_EVENT_MOUSE_BUTTON_UP:
                    if (e.button.button == SDL_BUTTON_LEFT) {
                        drawing = false;
                    }
                    break;
                case SDL_EVENT_MOUSE_MOTION:
                    if (drawing) {
                        set_grid_pixel(e.motion.x, e.motion.y);
                    }
                    break;
                case SDL_EVENT_KEY_DOWN:
                    if (e.key.key == SDLK_Q) {
                        running = false;
                    } else if (e.key.key == SDLK_C) {
                        clear_grid();
                    }
                    break;
            }
        }

        SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
        SDL_RenderClear(renderer);

        draw_grid(renderer);

        SDL_RenderPresent(renderer);
    }

    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();

    return 0;
}